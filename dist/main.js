(()=>{"use strict";var e={28:(e,t,r)=>{r.d(t,{Z:()=>c});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"td{\r\n    height:4vh;\r\n    width: 4vh;\r\n    border:.25vh solid black;\r\n    border-style: inset;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n    font-size: 6vh;\r\n}\r\nh3{\r\n    font-size: 3vh;\r\n}\r\n.tile{\r\n    background-color:whitesmoke;\r\n}\r\n\r\ntable{\r\n    text-align: center;\r\n    font-size: medium;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    border-collapse: collapse;\r\n}\r\nbutton{\r\n    width:10vh;\r\n    height:5vh;\r\n    margin-bottom: 5vh;\r\n    background-color: gray;\r\n    border-radius: 10%;\r\n    font-size: 2vh;\r\n    color:white\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: whitesmoke;\r\n}\r\n#placementTable{\r\n    margin-top: 8vh;\r\n}\r\n.hovered{\r\n    background-color: green;\r\n}\r\n.shiptile{\r\n    background-color: blue;\r\n}\r\n.red {\r\n    width: 3vh;\r\n    height: 3vh;\r\n    border-radius: 50%;\r\n    background-color: red;\r\n  }\r\n.white {\r\n    width: 3vh;\r\n    height: 3vh;\r\n    border-radius: 50%;\r\n    background-color: green;\r\n}\r\n#playerTable{\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    width:49%;\r\n}\r\n\r\n#enemyTable{\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    width:49%;\r\n}\r\n.msg{\r\n    font-size: 5vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,UAAU;IACV,wBAAwB;IACxB,mBAAmB;IACnB,UAAU;IACV,SAAS;AACb;AACA;IACI,WAAW;IACX,kBAAkB;IAClB,cAAc;AAClB;AACA;IACI,cAAc;AAClB;AACA;IACI,2BAA2B;AAC/B;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,UAAU;IACV,kBAAkB;IAClB,sBAAsB;IACtB,kBAAkB;IAClB,cAAc;IACd;AACJ;AACA;IACI,kBAAkB;IAClB,4BAA4B;AAChC;AACA;IACI,eAAe;AACnB;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,UAAU;IACV,WAAW;IACX,kBAAkB;IAClB,qBAAqB;EACvB;AACF;IACI,UAAU;IACV,WAAW;IACX,kBAAkB;IAClB,uBAAuB;AAC3B;AACA;IACI,qBAAqB;IACrB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,qBAAqB;IACrB,mBAAmB;IACnB,SAAS;AACb;AACA;IACI,cAAc;IACd,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB",sourcesContent:["td{\r\n    height:4vh;\r\n    width: 4vh;\r\n    border:.25vh solid black;\r\n    border-style: inset;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n    font-size: 6vh;\r\n}\r\nh3{\r\n    font-size: 3vh;\r\n}\r\n.tile{\r\n    background-color:whitesmoke;\r\n}\r\n\r\ntable{\r\n    text-align: center;\r\n    font-size: medium;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    border-collapse: collapse;\r\n}\r\nbutton{\r\n    width:10vh;\r\n    height:5vh;\r\n    margin-bottom: 5vh;\r\n    background-color: gray;\r\n    border-radius: 10%;\r\n    font-size: 2vh;\r\n    color:white\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: whitesmoke;\r\n}\r\n#placementTable{\r\n    margin-top: 8vh;\r\n}\r\n.hovered{\r\n    background-color: green;\r\n}\r\n.shiptile{\r\n    background-color: blue;\r\n}\r\n.red {\r\n    width: 3vh;\r\n    height: 3vh;\r\n    border-radius: 50%;\r\n    background-color: red;\r\n  }\r\n.white {\r\n    width: 3vh;\r\n    height: 3vh;\r\n    border-radius: 50%;\r\n    background-color: green;\r\n}\r\n#playerTable{\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    width:49%;\r\n}\r\n\r\n#enemyTable{\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    width:49%;\r\n}\r\n.msg{\r\n    font-size: 5vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);n&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],s=n.base?l[0]+n.base:l[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var A=r(u),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(h);else{var p=o(h,n);n.byIndex=c,t.splice(c,0,{identifier:u,updater:p,references:1})}i.push(u)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);t[c].references--}for(var l=n(e,o),s=0;s<a.length;s++){var d=r(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),n=r(795),o=r.n(n),a=r(569),i=r.n(a),c=r(565),l=r.n(c),s=r(216),d=r.n(s),u=r(589),A=r.n(u),h=r(28),p={};p.styleTagTransform=A(),p.setAttributes=l(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=d(),t()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;const m=(e,t)=>{const r=document.querySelectorAll("td");r.forEach((n=>{n.addEventListener("mouseover",(()=>{r.forEach((e=>{e.classList.remove("hovered")})),function(e,t,r){let n=e.dataset.coordArray.split(",").map(Number);if("Horizontal"===r)for(let e=0;e<t;e++){let t=[n[0],n[1]+e],r=document.querySelector(`td[data-coord-array="${t}"]`);r&&r.classList.add("hovered")}if("Vertical"===r)for(let e=0;e<t;e++){let t=[n[0]+e,n[1]],r=document.querySelector(`td[data-coord-array="${t}"]`);r&&r.classList.add("hovered")}}(n,e,t)}))}))},C=(e,t)=>{const r=(e=>{const t=[];for(let r=0;r<e.squareList.length;r++){let n=e.squareList[r];null===n.getShip()||t.push(n.coords)}return t})(e),n=document.querySelectorAll(t),o=new Set(r.map((e=>e.toString())));".place"===t?n.forEach((e=>{o.has(e.dataset.coordArray)&&(e.classList.remove("hovered"),e.classList.add("shiptile"))})):".player"===t&&n.forEach((e=>{o.has(e.dataset.pCoordArray)&&(e.classList.remove("hovered"),e.classList.add("shiptile"))}))},f={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2},v=e=>{const t=f[e];let r="Horizontal",n=0;return{id:e,length:t,direction:r,hits:n,getDirection:()=>r,changeDirection:()=>{r="Horizontal"===r?"Vertical":"Horizontal"},hit:()=>{n+=1},getHits:()=>n,isSunk:()=>n===t}},g=e=>{var t=null;const r=()=>t;var n=null;return{coords:e,ship:v,addShip:e=>{t=e},getShip:r,checkStatus:n,check:()=>{null===t?n="white":(n="red",r().hit())},getCheckStatus:()=>n}},b=()=>{const e={},t=[];for(let e=0;e<10;e++)for(let r=0;r<10;r++){const n=g([r,e]);t.push(n)}return{squareList:t,placeShip:(r,n,o)=>{const a={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2};if(!("Horizontal"===o&&n[1]+a[r]-1<10&&n[0]<10||"Vertical"===o&&n[1]<10&&n[0]+a[r]-1<10))return!1;{const a=v(r),i=a.length;if(e[r]=a,"Horizontal"===o)for(let e=0;e<i;e++){const r=10*(n[1]+e)+n[0],o=t[r];if(null!==o.getShip())return!1;o.addShip(a)}else if("Vertical"===o)for(let e=0;e<i;e++){const r=10*n[1]+n[0]+e,o=t[r];if(null!==o.getShip())return!1;o.addShip(a)}}},getShip:t=>e[t],receiveAttack:e=>{const r=e[0]+10*e[1],n=t[r];if(null!==n.getCheckStatus())return!1;n.check()},isDefeat:()=>Object.values(e).every((e=>e.isSunk())),getShipOnSquare:e=>{const r=e[0]+10*e[1];return t[r].getShip()}}},y=(e,t)=>{const r=[],n=[];for(let t=0;t<e.squareList.length;t++){let o=e.squareList[t];null===o.getCheckStatus()||("red"===o.getCheckStatus()?r.push(o.coords):"white"===o.getCheckStatus()&&n.push(o.coords))}const o=document.querySelectorAll(t);".enemy"===t?o.forEach((e=>{e.replaceChildren();let t=e.dataset.eCoordArray;for(let n=0;n<r.length;n++)if(r[n].toString()===t){const t=document.createElement("div");t.classList.add("red"),e.appendChild(t)}for(let r=0;r<n.length;r++)if(n[r].toString()===t){const t=document.createElement("div");t.classList.add("white"),e.appendChild(t)}})):".player"===t&&o.forEach((e=>{e.replaceChildren();let t=e.dataset.pCoordArray;for(let n=0;n<r.length;n++)if(r[n].toString()===t){const t=document.createElement("div");t.classList.add("red"),e.appendChild(t)}for(let r=0;r<n.length;r++)if(n[r].toString()===t){const t=document.createElement("div");t.classList.add("white"),e.appendChild(t)}}))},B=e=>{document.querySelector("#game").style.display="none";const t=document.createElement("div"),r=document.createElement("button");r.textContent="Restart?",t.textContent=`Winner: ${e}`,t.classList.add("msg"),r.addEventListener("click",(function(){location.reload()})),t.appendChild(r),document.querySelector("#content").appendChild(t)},I=e=>{document.querySelector("#placementTable").style.display="none",(()=>{const e=document.createElement("table");e.setAttribute("class","center");for(let t=0;t<10;t++){const r=document.createElement("tr");for(let e=0;e<10;e++){let n=document.createElement("td");n.setAttribute("class","tile"),n.classList.add("enemy"),r.appendChild(n),n.dataset.eCoordArray=`${e},${t}`}e.appendChild(r)}const t=document.querySelector("#enemyTable"),r=document.createElement("h3");r.textContent="Enemy Board",t.appendChild(r),t.appendChild(e)})();const t=b();t.placeShip("Carrier",[3,4],"Horizontal"),t.placeShip("Battleship",[5,1],"Vertical"),t.placeShip("Destroyer",[6,8],"Vertical"),t.placeShip("Cruiser",[1,1],"Horizontal"),t.placeShip("PatrolBoat",[7,4],"Horizontal"),y(t,".enemy"),(()=>{const e=document.createElement("table");e.setAttribute("class","center");for(let t=0;t<10;t++){const r=document.createElement("tr");for(let e=0;e<10;e++){let n=document.createElement("td");n.setAttribute("class","tile"),n.classList.add("player"),r.appendChild(n),n.dataset.pCoordArray=`${e},${t}`}e.appendChild(r)}const t=document.querySelector("#playerTable"),r=document.createElement("h3");r.textContent="Player Board",t.appendChild(r),t.appendChild(e)})(),C(e,".player"),((e,t)=>{const r=document.querySelectorAll(".enemy");let n=[];for(let e=0;e<10;e++)for(let t=0;t<10;t++){let r=[e,t];n.push(r)}r.forEach((r=>{r.addEventListener("click",(function(){let o=r.dataset.eCoordArray.split(",").map(Number);if(!1===e.receiveAttack(o));else{y(e,".enemy");let r=Math.floor(Math.random()*n.length),o=n[r];n.splice(r,1),t.receiveAttack(o),y(t,".player")}e.isDefeat()&&B("Player"),t.isDefeat()&&B("Computer")}))}))})(t,e)};!function(){(()=>{const e=document.createElement("table");e.setAttribute("class","center");for(let t=0;t<10;t++){const r=document.createElement("tr");for(let e=0;e<10;e++){let n=document.createElement("td");n.setAttribute("class","tile"),n.classList.add("place"),r.appendChild(n),n.dataset.coordArray=`${e},${t}`}e.appendChild(r)}const t=document.querySelector("#placementTable"),r=document.createElement("h3");r.textContent="Place Your Ships";const n=document.createElement("button");n.textContent="Rotate",n.classList.add("rotate-btn"),t.appendChild(r),t.appendChild(n),t.appendChild(e)})();const e=b(),t=["Carrier","Battleship","Destroyer","Cruiser","PatrolBoat"],r=(()=>{let e="Horizontal";return{changeDirection:()=>{e="Horizontal"===e?"Vertical":"Horizontal"},obtainDirection:()=>e}})();((e,t,r)=>{console.log("hi");const n={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2};m(n[r[0]],e.obtainDirection()),document.querySelectorAll(".place").forEach((o=>{o.addEventListener("click",(function(){let a=o.dataset.coordArray.split(",").map(Number),i=r[0];!1!==t.placeShip(i,a,e.obtainDirection())&&(r.shift(),console.log(e.obtainDirection()),m(n[r[0]],e.obtainDirection()),C(t,".place"),0===r.length&&I(t))}))}))})(r,e,t),((e,t)=>{const r={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2};document.querySelector(".rotate-btn").addEventListener("click",(function(){e.changeDirection(),m(r[t[0]],e.obtainDirection())}))})(r,t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,