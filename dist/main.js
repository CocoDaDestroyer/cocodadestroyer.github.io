(()=>{"use strict";var e={28:(e,t,r)=>{r.d(t,{Z:()=>c});var n=r(537),o=r.n(n),a=r(645),i=r.n(a)()(o());i.push([e.id,"td{\r\n    height:5vh;\r\n    width: 5vh;\r\n    border:.25vh solid black;\r\n    border-style: inset;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n    font-size: 6vh;\r\n}\r\nh3{\r\n    font-size: 3vh;\r\n}\r\n.tile{\r\n    background-color:whitesmoke;\r\n}\r\n\r\ntable{\r\n    text-align: center;\r\n    font-size: medium;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    border-collapse: collapse;\r\n}\r\nbutton{\r\n    width:10vh;\r\n    height:4vh;\r\n    margin-bottom: 5vh;\r\n    background-color: gray;\r\n    border-radius: 10%;\r\n    font-size: 2vh;\r\n    color:white\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: whitesmoke;\r\n}\r\n#placementTable{\r\n    margin-top: 8vh;\r\n}\r\n.hovered{\r\n    background-color: green;\r\n}\r\n.shiptile{\r\n    background-color: blue;\r\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,UAAU;IACV,wBAAwB;IACxB,mBAAmB;IACnB,UAAU;IACV,SAAS;AACb;AACA;IACI,WAAW;IACX,kBAAkB;IAClB,cAAc;AAClB;AACA;IACI,cAAc;AAClB;AACA;IACI,2BAA2B;AAC/B;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,yBAAyB;AAC7B;AACA;IACI,UAAU;IACV,UAAU;IACV,kBAAkB;IAClB,sBAAsB;IACtB,kBAAkB;IAClB,cAAc;IACd;AACJ;AACA;IACI,kBAAkB;IAClB,4BAA4B;AAChC;AACA;IACI,eAAe;AACnB;AACA;IACI,uBAAuB;AAC3B;AACA;IACI,sBAAsB;AAC1B",sourcesContent:["td{\r\n    height:5vh;\r\n    width: 5vh;\r\n    border:.25vh solid black;\r\n    border-style: inset;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\nh1{\r\n    color:black;\r\n    text-align: center;\r\n    font-size: 6vh;\r\n}\r\nh3{\r\n    font-size: 3vh;\r\n}\r\n.tile{\r\n    background-color:whitesmoke;\r\n}\r\n\r\ntable{\r\n    text-align: center;\r\n    font-size: medium;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    border-collapse: collapse;\r\n}\r\nbutton{\r\n    width:10vh;\r\n    height:4vh;\r\n    margin-bottom: 5vh;\r\n    background-color: gray;\r\n    border-radius: 10%;\r\n    font-size: 2vh;\r\n    color:white\r\n}\r\nbody{\r\n    text-align: center;\r\n    background-color: whitesmoke;\r\n}\r\n#placementTable{\r\n    margin-top: 8vh;\r\n}\r\n.hovered{\r\n    background-color: green;\r\n}\r\n.shiptile{\r\n    background-color: blue;\r\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);n&&i[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],l=n.base?s[0]+n.base:s[0],u=a[l]||0,d="".concat(l," ").concat(u);a[l]=u+1;var A=r(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)t[A].references++,t[A].updater(h);else{var p=o(h,n);n.byIndex=c,t.splice(c,0,{identifier:d,updater:p,references:1})}i.push(d)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);t[c].references--}for(var s=n(e,o),l=0;l<a.length;l++){var u=r(a[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=s}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(379),t=r.n(e),n=r(795),o=r.n(n),a=r(569),i=r.n(a),c=r(565),s=r.n(c),l=r(216),u=r.n(l),d=r(589),A=r.n(d),h=r(28),p={};p.styleTagTransform=A(),p.setAttributes=s(),p.insert=i().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=u(),t()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;const f=(e,t)=>{const r=document.querySelectorAll("td");r.forEach((n=>{n.addEventListener("mouseover",(()=>{r.forEach((e=>{e.classList.remove("hovered")})),function(e,t,r){let n=e.dataset.coordArray.split(",").map(Number);if("Horizontal"===r)for(let e=0;e<t;e++){let t=[n[0],n[1]+e],r=document.querySelector(`td[data-coord-array="${t}"]`);r&&r.classList.add("hovered")}if("Vertical"===r)for(let e=0;e<t;e++){let t=[n[0]+e,n[1]],r=document.querySelector(`td[data-coord-array="${t}"]`);r&&r.classList.add("hovered")}}(n,e,t)}))}))},v=(e,t,r)=>{console.log("hi");const n={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2};f(n[r[0]],e.obtainDirection()),document.querySelectorAll("td").forEach((o=>{o.addEventListener("click",(function(){let a=o.dataset.coordArray.split(",").map(Number),i=r[0];!1!==t.placeShip(i,a,e.obtainDirection())&&(r.shift(),console.log(e.obtainDirection()),f(n[r[0]],e.obtainDirection()),(e=>{const t=(e=>{const t=[];for(let r=0;r<e.squareList.length;r++){let n=e.squareList[r];null===n.getShip()||t.push(n.coords)}return t})(e),r=document.querySelectorAll("td"),n=new Set(t.map((e=>e.toString())));r.forEach((e=>{n.has(e.dataset.coordArray)&&(e.classList.remove("hovered"),e.classList.add("shiptile"))}))})(t))}))}))},m={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2},g=e=>{const t=m[e];let r="Horizontal",n=0;return{id:e,length:t,direction:r,hits:n,getDirection:()=>r,changeDirection:()=>{r="Horizontal"===r?"Vertical":"Horizontal"},hit:()=>{n+=1},getHits:()=>n,isSunk:()=>n===t}},C=e=>{var t=null;const r=()=>t;var n=null;return{coords:e,ship:g,addShip:e=>{t=e},getShip:r,checkStatus:n,check:()=>{null===t?n="white":(n="red",r().hit())},getCheckStatus:()=>n}};!function(){(()=>{const e=document.createElement("table");e.setAttribute("class","center");for(let t=0;t<10;t++){const r=document.createElement("tr");for(let e=0;e<10;e++){let n=document.createElement("td");n.textContent=`${e},${t}`,n.setAttribute("class","tile"),r.appendChild(n),n.dataset.coordArray=`${e},${t}`}e.appendChild(r)}const t=document.querySelector("#placementTable"),r=document.createElement("h3");r.textContent="Place Your Ships";const n=document.createElement("button");n.textContent="Rotate",n.classList.add("rotate-btn"),t.appendChild(r),t.appendChild(n),t.appendChild(e)})();const e=(()=>{const e={},t=[];for(let e=0;e<10;e++)for(let r=0;r<10;r++){const n=C([r,e]);t.push(n)}return{squareList:t,placeShip:(r,n,o)=>{const a={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2};if(!("Horizontal"===o&&n[1]+a[r]-1<10&&n[0]<10||"Vertical"===o&&n[1]<10&&n[0]+a[r]-1<10))return!1;{const a=g(r),i=a.length;if(e[r]=a,"Horizontal"===o)for(let e=0;e<i;e++){const r=10*(n[1]+e)+n[0],o=t[r];if(null!==o.getShip())return!1;o.addShip(a)}else if("Vertical"===o)for(let e=0;e<i;e++){const r=10*n[1]+n[0]+e,o=t[r];if(null!==o.getShip())return!1;o.addShip(a)}}},getShip:t=>e[t],receiveAttack:e=>{const r=e[0]+10*e[1],n=t[r],o=n.getCheckStatus();if(null!==o)return o;n.check()},isDefeat:()=>Object.values(e).every((e=>e.isSunk())),getShipOnSquare:e=>{const r=e[0]+10*e[1];return t[r].getShip()}}})(),t=["Carrier","Battleship","Destroyer","Cruiser","PatrolBoat"],r=(()=>{let e="Horizontal";return{changeDirection:()=>{e="Horizontal"===e?"Vertical":"Horizontal"},obtainDirection:()=>e}})();v(r,e,t),((e,t)=>{const r={Carrier:5,Battleship:4,Destroyer:3,Cruiser:3,PatrolBoat:2};document.querySelector(".rotate-btn").addEventListener("click",(function(){e.changeDirection(),f(r[t[0]],e.obtainDirection())}))})(r,t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,